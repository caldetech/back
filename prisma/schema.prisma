generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CustomerType {
  COMPANY
  PERSON
}

model Customer {
  id             String        @id @default(uuid())
  customerType   CustomerType @map("customer_type")
  name           String
  document       String?       
  mainNumber     String       @unique @map("main_number")
  contactNumber  String?       @map("contact_number")
  address        String        @map("address_description")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String        @map("organization_id")
  Order Order[]

  @@index([createdAt])
  @@index([address])
  @@index([mainNumber])
  @@index([name])
  @@unique([mainNumber, organizationId])
  @@map("customers")
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

model User {
  id                 String         @id @default(uuid())
  name               String
  email              String         @unique
  number             String?        @unique
  passwordHash       String        @map("password_hash")
  avatarUrl          String?        @map("avatar_url")
  status             UserStatus     @default(PENDING)
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]

  @@index([status])
  @@index([email])
  @@index([name])
  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
  CONFIRM_ACCOUNT
  INVITE_USER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
  GOOGLE
  CREDENTIALS
}

model Account {
  id                 String          @id @default(uuid())
  provider           AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String          @map("user_id")

  @@unique([providerAccountId, userId])
  @@map("accounts")
}

enum Role {
  DEV
  ADMIN
  MEMBER
  BILLING
  MANAGER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@map("invites")
}

model CommissionTarget {
  id String @id @default(uuid())
  base Int 
  value Int
  target Boolean @default(false)
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")
  member Member? @relation("CommissionTarget")

  @@index([updatedAt])
  @@map("commissions_base")
}

enum CommissionTargetStatus {
  NEXT
  CURRENT
}

model SingleCommission {
  id String @id @default(uuid())
  value Int
  flag CommissionTargetStatus @default(CURRENT)
  member Member @relation(fields: [memberid], references: [id])
  memberid String @map("member_id")
  order Order @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")
  createdAt                 DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@index([flag])
  @@unique([memberid, orderId])
  @@map("single_commissions")
}

model Member {
  id                  String              @id @default(uuid())
  role                Role                @default(MEMBER)
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String              @map("organization_id")
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String              @map("user_id")
  own_orders          Order[]
  assignedMember AssignedMember[]
  commissionTarget CommissionTarget? @relation("CommissionTarget", fields: [commissionTargetId], references: [id])
  commissionTargetId String? @unique @map("commission_target_id")
  singleCommission SingleCommission[]

  @@index([role])
  @@unique([id, commissionTargetId])
  @@unique([id, organizationId])
  @@unique([organizationId, userId])
  @@map("members")
} 

enum OrganizationStatus {
  ACTIVE
  PENDING
  INACTIVE
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")
  status OrganizationStatus @default(PENDING)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites   Invite[]
  members   Member[]
  orders    Order[]
  products  Product[]
  customers Customer[]
  BlingToken BlingToken[]

  @@unique([id, ownerId])
  @@map("organizations")
}

model ProductOrder {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade) 
  orderId String @map("order_id")
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String? @map("product_id")

  @@index([createdAt])
  @@unique([orderId, productId])
  @@unique([id, orderId])
  @@map("product_orders")
}

enum OrderType {
  SALE
  BUDGET
  WARRANTY
} 

enum OrderStatus {
  OPEN
  CLOSED
  CANCELLED
}

model Order {
  id              String         @id @default(uuid())
  orderNumber Int @default(autoincrement()) @map("order_number")
  type            OrderType
  status OrderStatus @default(OPEN)
  show Boolean @default(true)

  scheduleDate DateTime @map("schedule_date")
  scheduleTime DateTime @map("schedule_time")

  owner          Member?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId         String?         @map("owner_id")

  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String         @map("organization_id")

  description ServiceDescription @relation("OrderDescription", fields: [descriptionId], references: [id])
  descriptionId String @unique @map("description_id")

  customer Customer? @relation(fields: [customerid], references: [id], onDelete: SetNull)
  customerid String? @map("customer_id")

  payment        Payment? @relation("Payment", fields: [paymentId], references: [id])
  paymentId String? @map("payment_id") @unique

  productOrder ProductOrder[]
  assignedMembers AssignedMember[]
  orderAttachment OrderAttachment? @relation("OrderAttachment", fields: [orderAttachmentId], references: [id])
  orderAttachmentId String? @unique @map("order_attachment_id")
  singleCommission SingleCommission[]

  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([type])
  @@index([status])
  @@index([show])
  @@unique([id, descriptionId])
  @@unique([id, paymentId])
  @@unique([id, ownerId])
  @@unique([id, organizationId])
  @@map("orders")
}

model OrderAttachment {
  id         String   @id @default(uuid())
  order      Order?    @relation("OrderAttachment")
  orderId    String?   @map("order_id") @unique
  filename   String   // Nome original do arquivo
  url        String   // URL do S3 
  mimetype   String   // Ex: "application/pdf"
  size       Int      // Em bytes
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("order_attachments")
}

model Product {
  id          String   @id @default(uuid())
  name       String
  blingId BigInt @unique  @map("bling_id")
  price Float
  costPrice Float @map("cost_price")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String         @map("organization_id")
  productOrder ProductOrder[]

  @@index([updatedAt])
  @@index([name])
  @@index([price])
  @@unique([organizationId, blingId])
  @@map("products")
}

model ServiceDescription {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  Order Order? @relation("OrderDescription")

  @@map("description_services")
}

enum PaymentType {
  PIX
  CARTAO
  BOLETO
  DINHEIRO
  DEPOSITO
  PENDENTE
}

enum PaymentStatus {
  PENDING
  RECEIVED
  CANCELLED
}

model BlingToken {
  id              String   @id @default(uuid())
  accessToken     String   @map("access_token")
  refreshToken    String   @map("refresh_token")
  expiresAt       DateTime @map("expires_at")
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String   @map("organization_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([organizationId])
  @@map("bling_tokens")
}

model AssignedMember {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String   @map("order_id")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String   @map("member_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@unique([orderId, memberId])
  @@map("assigned_members")
}

model PaymentInstallment {
  id         String         @id @default(uuid())
  dueDate    DateTime       @map("due_date")   
  amount     Float                            
  status     PaymentStatus  @default(PENDING)  
  paidAt     DateTime?                         
  payment    Payment        @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId  String         @map("payment_id")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  @@index([paidAt])
  @@index([dueDate])
  @@index([status])
  @@index([amount])
  @@map("payment_installments")
}

model PaymentFee {
  id         String    @id @default(uuid())
  amount     Float
  status     PaymentStatus @default(PENDING)
  paidAt     DateTime? @map("paid_at")
  payment    Payment?   @relation("FeeToPayment")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([paidAt])
  @@index([status])
  @@index([amount])
  @@map("payment_fees")
}

model Payment {
  id           String      @id @default(uuid())
  amount       Float
  method       PaymentType
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime? @map("paid_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  order        Order? @relation("Payment")
  installments PaymentInstallment[]

  paymentFee   PaymentFee?  @relation("FeeToPayment", fields: [paymentFeeId], references: [id])
  paymentFeeId String      @map("payment_feed_id") @unique

  @@index([updatedAt])
  @@index([createdAt])
  @@index([method])
  @@index([status])
  @@index([amount])
  @@map("payments")
}






